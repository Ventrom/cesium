define(["./when-54c2dc71","./Cartesian2-15709417","./Transforms-c00dcfdd","./ComponentDatatype-a26dd044","./Check-6c0211bc","./GeometryAttribute-c2f3a6a0","./GeometryAttributes-4fcfcf40","./IndexDatatype-eaebd63b","./Math-fbfbe3b1","./WallGeometryLibrary-ddb9104e","./RuntimeError-2109023a","./WebGLConstants-76bb35d1","./arrayRemoveDuplicates-b5ccac6b","./PolylinePipeline-53cbf02f","./EllipsoidGeodesic-e0adc5e7","./EllipsoidRhumbLine-281c49be","./IntersectionTests-9d9af9db","./Plane-ff99a7c3"],function(D,x,G,L,m,P,T,V,I,R,e,i,t,r,n,a,o,s){"use strict";var S=new x.Cartesian3,q=new x.Cartesian3;function u(e){var i=(e=D.defaultValue(e,D.defaultValue.EMPTY_OBJECT)).positions,t=e.maximumHeights,r=e.minimumHeights;if(!D.defined(i))throw new m.DeveloperError("options.positions is required.");if(D.defined(t)&&t.length!==i.length)throw new m.DeveloperError("options.positions and options.maximumHeights must have the same length.");if(D.defined(r)&&r.length!==i.length)throw new m.DeveloperError("options.positions and options.minimumHeights must have the same length.");var n=D.defaultValue(e.granularity,I.CesiumMath.RADIANS_PER_DEGREE),a=D.defaultValue(e.ellipsoid,x.Ellipsoid.WGS84);this._positions=i,this._minimumHeights=r,this._maximumHeights=t,this._granularity=n,this._ellipsoid=x.Ellipsoid.clone(a),this._workerName="createWallOutlineGeometry";var o=1+i.length*x.Cartesian3.packedLength+2;D.defined(r)&&(o+=r.length),D.defined(t)&&(o+=t.length),this.packedLength=o+x.Ellipsoid.packedLength+1}u.pack=function(e,i,t){if(!D.defined(e))throw new m.DeveloperError("value is required");if(!D.defined(i))throw new m.DeveloperError("array is required");var r;t=D.defaultValue(t,0);var n=e._positions,a=n.length;for(i[t++]=a,r=0;r<a;++r,t+=x.Cartesian3.packedLength)x.Cartesian3.pack(n[r],i,t);var o=e._minimumHeights;if(a=D.defined(o)?o.length:0,i[t++]=a,D.defined(o))for(r=0;r<a;++r)i[t++]=o[r];var s=e._maximumHeights;if(a=D.defined(s)?s.length:0,i[t++]=a,D.defined(s))for(r=0;r<a;++r)i[t++]=s[r];return x.Ellipsoid.pack(e._ellipsoid,i,t),i[t+=x.Ellipsoid.packedLength]=e._granularity,i};var p=x.Ellipsoid.clone(x.Ellipsoid.UNIT_SPHERE),f={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:p,granularity:void 0};return u.unpack=function(e,i,t){if(!D.defined(e))throw new m.DeveloperError("array is required");var r;i=D.defaultValue(i,0);var n,a,o=e[i++],s=new Array(o);for(r=0;r<o;++r,i+=x.Cartesian3.packedLength)s[r]=x.Cartesian3.unpack(e,i);if(0<(o=e[i++]))for(n=new Array(o),r=0;r<o;++r)n[r]=e[i++];if(0<(o=e[i++]))for(a=new Array(o),r=0;r<o;++r)a[r]=e[i++];var l=x.Ellipsoid.unpack(e,i,p),d=e[i+=x.Ellipsoid.packedLength];return D.defined(t)?(t._positions=s,t._minimumHeights=n,t._maximumHeights=a,t._ellipsoid=x.Ellipsoid.clone(l,t._ellipsoid),t._granularity=d,t):(f.positions=s,f.minimumHeights=n,f.maximumHeights=a,f.granularity=d,new u(f))},u.fromConstantHeights=function(e){var i,t,r=(e=D.defaultValue(e,D.defaultValue.EMPTY_OBJECT)).positions;if(!D.defined(r))throw new m.DeveloperError("options.positions is required.");var n=e.minimumHeight,a=e.maximumHeight,o=D.defined(n),s=D.defined(a);if(o||s){var l=r.length;i=o?new Array(l):void 0,t=s?new Array(l):void 0;for(var d=0;d<l;++d)o&&(i[d]=n),s&&(t[d]=a)}return new u({positions:r,maximumHeights:t,minimumHeights:i,ellipsoid:e.ellipsoid})},u.createGeometry=function(e){var i=e._positions,t=e._minimumHeights,r=e._maximumHeights,n=e._granularity,a=e._ellipsoid,o=R.WallGeometryLibrary.computePositions(a,i,r,t,n,!1);if(D.defined(o)){var s,l=o.bottomPositions,d=o.topPositions,m=d.length,u=2*m,p=new Float64Array(u),f=0;for(m/=3,s=0;s<m;++s){var h=3*s,c=x.Cartesian3.fromArray(d,h,S),g=x.Cartesian3.fromArray(l,h,q);p[f++]=g.x,p[f++]=g.y,p[f++]=g.z,p[f++]=c.x,p[f++]=c.y,p[f++]=c.z}var y=new T.GeometryAttributes({position:new P.GeometryAttribute({componentDatatype:L.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:p})}),v=u/3;u=2*v-4+v;var E=V.IndexDatatype.createTypedArray(v,u),w=0;for(s=0;s<v-2;s+=2){var _=s,b=s+2,C=x.Cartesian3.fromArray(p,3*_,S),H=x.Cartesian3.fromArray(p,3*b,q);if(!x.Cartesian3.equalsEpsilon(C,H,I.CesiumMath.EPSILON10)){var A=s+1,k=s+3;E[w++]=A,E[w++]=_,E[w++]=A,E[w++]=k,E[w++]=_,E[w++]=b}}return E[w++]=v-2,E[w++]=v-1,new P.Geometry({attributes:y,indices:E,primitiveType:P.PrimitiveType.LINES,boundingSphere:new G.BoundingSphere.fromVertices(p)})}},function(e,i){return D.defined(i)&&(e=u.unpack(e,i)),e._ellipsoid=x.Ellipsoid.clone(e._ellipsoid),u.createGeometry(e)}});
//# sourceMappingURL=createWallOutlineGeometry.js.map
