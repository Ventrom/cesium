{"version":3,"file":"WallGeometryLibrary-ddb9104e.js","sources":["../../../../Source/Core/WallGeometryLibrary.js"],"sourcesContent":["import arrayRemoveDuplicates from \"./arrayRemoveDuplicates.js\";\nimport Cartesian3 from \"./Cartesian3.js\";\nimport Cartographic from \"./Cartographic.js\";\nimport defined from \"./defined.js\";\nimport CesiumMath from \"./Math.js\";\nimport PolylinePipeline from \"./PolylinePipeline.js\";\n\n/**\n * @private\n */\nvar WallGeometryLibrary = {};\n\nfunction latLonEquals(c0, c1) {\n  return (\n    CesiumMath.equalsEpsilon(c0.latitude, c1.latitude, CesiumMath.EPSILON10) &&\n    CesiumMath.equalsEpsilon(c0.longitude, c1.longitude, CesiumMath.EPSILON10)\n  );\n}\n\nvar scratchCartographic1 = new Cartographic();\nvar scratchCartographic2 = new Cartographic();\nfunction removeDuplicates(ellipsoid, positions, topHeights, bottomHeights) {\n  positions = arrayRemoveDuplicates(positions, Cartesian3.equalsEpsilon);\n\n  var length = positions.length;\n  if (length < 2) {\n    return;\n  }\n\n  var hasBottomHeights = defined(bottomHeights);\n  var hasTopHeights = defined(topHeights);\n\n  var cleanedPositions = new Array(length);\n  var cleanedTopHeights = new Array(length);\n  var cleanedBottomHeights = new Array(length);\n\n  var v0 = positions[0];\n  cleanedPositions[0] = v0;\n\n  var c0 = ellipsoid.cartesianToCartographic(v0, scratchCartographic1);\n  if (hasTopHeights) {\n    c0.height = topHeights[0];\n  }\n\n  cleanedTopHeights[0] = c0.height;\n\n  if (hasBottomHeights) {\n    cleanedBottomHeights[0] = bottomHeights[0];\n  } else {\n    cleanedBottomHeights[0] = 0.0;\n  }\n\n  var startTopHeight = cleanedTopHeights[0];\n  var startBottomHeight = cleanedBottomHeights[0];\n  var hasAllSameHeights = startTopHeight === startBottomHeight;\n\n  var index = 1;\n  for (var i = 1; i < length; ++i) {\n    var v1 = positions[i];\n    var c1 = ellipsoid.cartesianToCartographic(v1, scratchCartographic2);\n    if (hasTopHeights) {\n      c1.height = topHeights[i];\n    }\n    hasAllSameHeights = hasAllSameHeights && c1.height === 0;\n\n    if (!latLonEquals(c0, c1)) {\n      cleanedPositions[index] = v1; // Shallow copy!\n      cleanedTopHeights[index] = c1.height;\n\n      if (hasBottomHeights) {\n        cleanedBottomHeights[index] = bottomHeights[i];\n      } else {\n        cleanedBottomHeights[index] = 0.0;\n      }\n      hasAllSameHeights =\n        hasAllSameHeights &&\n        cleanedTopHeights[index] === cleanedBottomHeights[index];\n\n      Cartographic.clone(c1, c0);\n      ++index;\n    } else if (c0.height < c1.height) {\n      // two adjacent positions are the same, so use whichever has the greater height\n      cleanedTopHeights[index - 1] = c1.height;\n    }\n  }\n\n  if (hasAllSameHeights || index < 2) {\n    return;\n  }\n\n  cleanedPositions.length = index;\n  cleanedTopHeights.length = index;\n  cleanedBottomHeights.length = index;\n\n  return {\n    positions: cleanedPositions,\n    topHeights: cleanedTopHeights,\n    bottomHeights: cleanedBottomHeights,\n  };\n}\n\nvar positionsArrayScratch = new Array(2);\nvar heightsArrayScratch = new Array(2);\nvar generateArcOptionsScratch = {\n  positions: undefined,\n  height: undefined,\n  granularity: undefined,\n  ellipsoid: undefined,\n};\n\n/**\n * @private\n */\nWallGeometryLibrary.computePositions = function (\n  ellipsoid,\n  wallPositions,\n  maximumHeights,\n  minimumHeights,\n  granularity,\n  duplicateCorners\n) {\n  var o = removeDuplicates(\n    ellipsoid,\n    wallPositions,\n    maximumHeights,\n    minimumHeights\n  );\n\n  if (!defined(o)) {\n    return;\n  }\n\n  wallPositions = o.positions;\n  maximumHeights = o.topHeights;\n  minimumHeights = o.bottomHeights;\n\n  var length = wallPositions.length;\n  var numCorners = length - 2;\n  var topPositions;\n  var bottomPositions;\n\n  var minDistance = CesiumMath.chordLength(\n    granularity,\n    ellipsoid.maximumRadius\n  );\n\n  var generateArcOptions = generateArcOptionsScratch;\n  generateArcOptions.minDistance = minDistance;\n  generateArcOptions.ellipsoid = ellipsoid;\n\n  if (duplicateCorners) {\n    var count = 0;\n    var i;\n\n    for (i = 0; i < length - 1; i++) {\n      count +=\n        PolylinePipeline.numberOfPoints(\n          wallPositions[i],\n          wallPositions[i + 1],\n          minDistance\n        ) + 1;\n    }\n\n    topPositions = new Float64Array(count * 3);\n    bottomPositions = new Float64Array(count * 3);\n\n    var generateArcPositions = positionsArrayScratch;\n    var generateArcHeights = heightsArrayScratch;\n    generateArcOptions.positions = generateArcPositions;\n    generateArcOptions.height = generateArcHeights;\n\n    var offset = 0;\n    for (i = 0; i < length - 1; i++) {\n      generateArcPositions[0] = wallPositions[i];\n      generateArcPositions[1] = wallPositions[i + 1];\n\n      generateArcHeights[0] = maximumHeights[i];\n      generateArcHeights[1] = maximumHeights[i + 1];\n\n      var pos = PolylinePipeline.generateArc(generateArcOptions);\n      topPositions.set(pos, offset);\n\n      generateArcHeights[0] = minimumHeights[i];\n      generateArcHeights[1] = minimumHeights[i + 1];\n\n      bottomPositions.set(\n        PolylinePipeline.generateArc(generateArcOptions),\n        offset\n      );\n\n      offset += pos.length;\n    }\n  } else {\n    generateArcOptions.positions = wallPositions;\n    generateArcOptions.height = maximumHeights;\n    topPositions = new Float64Array(\n      PolylinePipeline.generateArc(generateArcOptions)\n    );\n\n    generateArcOptions.height = minimumHeights;\n    bottomPositions = new Float64Array(\n      PolylinePipeline.generateArc(generateArcOptions)\n    );\n  }\n\n  return {\n    bottomPositions: bottomPositions,\n    topPositions: topPositions,\n    numCorners: numCorners,\n  };\n};\nexport default WallGeometryLibrary;\n"],"names":["WallGeometryLibrary","scratchCartographic1","Cartographic","scratchCartographic2","positionsArrayScratch","Array","heightsArrayScratch","generateArcOptionsScratch","positions","undefined","height","granularity","ellipsoid","computePositions","wallPositions","maximumHeights","minimumHeights","duplicateCorners","o","topHeights","bottomHeights","length","arrayRemoveDuplicates","Cartesian3","equalsEpsilon","hasBottomHeights","defined","hasTopHeights","cleanedPositions","cleanedTopHeights","cleanedBottomHeights","v0","c0","cartesianToCartographic","c1","hasAllSameHeights","index","i","v1","CesiumMath","latitude","EPSILON10","longitude","clone","removeDuplicates","topPositions","bottomPositions","numCorners","minDistance","chordLength","maximumRadius","generateArcOptions","count","PolylinePipeline","numberOfPoints","Float64Array","generateArcPositions","generateArcHeights","offset","pos","generateArc","set"],"mappings":"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"}